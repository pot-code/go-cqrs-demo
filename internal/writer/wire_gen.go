// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package writer

import (
	"github.com/Shopify/sarama"
	"github.com/google/wire"
	"github.com/pot-code/go-cqrs-demo/internal/writer/config"
	"github.com/pot-code/go-cqrs-demo/internal/writer/consumer"
	db2 "github.com/pot-code/go-cqrs-demo/pkg/db"
	"github.com/pot-code/go-cqrs-demo/pkg/mq"
	"github.com/pot-code/gobit/pkg/db"
	"github.com/pot-code/gobit/pkg/logging"
	"github.com/pot-code/gobit/pkg/util"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitWriter(lm *util.LifecycleManager) *Writer {
	appConfig := config.NewAppConfig()
	kafkaConsumerConfig := appConfig.KafkaConsumer
	consumerGroup := mq.NewKafkaConsumerGroup(kafkaConsumerConfig, lm)
	loggingConfig := appConfig.Logging
	logger := logging.NewZapLoggerProvider(loggingConfig, lm)
	baseConfig := appConfig.Base
	kafkaEventConsumer := mq.NewKafkaEventConsumer(logger, baseConfig)
	databaseConfig := appConfig.Database
	sqlxDB := db.NewSqlxProvider(databaseConfig, lm)
	client := db2.NewEntClient(baseConfig, sqlxDB, lm)
	orderCreateHandler := consumer.NewOrderCreateHandler(kafkaEventConsumer, logger, client)
	orderConfirmHandler := consumer.NewOrderConfirmHandler(kafkaEventConsumer, logger, client)
	handlerCollections := &HandlerCollections{
		OrderCreateHandler:  orderCreateHandler,
		OrderConfirmHandler: orderConfirmHandler,
	}
	writer := NewWriter(consumerGroup, appConfig, kafkaEventConsumer, handlerCollections, logger)
	return writer
}

// wire.go:

type HandlerCollections struct {
	*consumer.OrderCreateHandler
	*consumer.OrderConfirmHandler
}

type Writer struct {
	KafkaConsumerGroup sarama.ConsumerGroup
	OrderConsumer      *mq.KafkaEventConsumer
	Config             *config.AppConfig
	Logger             *zap.Logger
}

func NewWriter(
	kc sarama.ConsumerGroup,
	cfg *config.AppConfig,
	c *mq.KafkaEventConsumer,
	hc *HandlerCollections,
	logger *zap.Logger,
) *Writer {
	return &Writer{KafkaConsumerGroup: kc, OrderConsumer: c, Logger: logger, Config: cfg}
}

var HandlerSet = wire.NewSet(wire.Struct(new(HandlerCollections), "*"), consumer.NewOrderCreateHandler, consumer.NewOrderConfirmHandler)
