// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/pot-code/go-cqrs-demo/ent/order"
	"github.com/pot-code/go-cqrs-demo/ent/orderlineitem"
)

// OrderLineItem is the model entity for the OrderLineItem schema.
type OrderLineItem struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID string `json:"order_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID string `json:"product_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderLineItemQuery when eager-loading is set.
	Edges             OrderLineItemEdges `json:"edges"`
	order_order_items *string
}

// OrderLineItemEdges holds the relations/edges for other nodes in the graph.
type OrderLineItemEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Order `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderLineItemEdges) OwnerOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderLineItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderlineitem.FieldID, orderlineitem.FieldOrderID, orderlineitem.FieldProductID:
			values[i] = new(sql.NullString)
		case orderlineitem.FieldCreatedAt, orderlineitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case orderlineitem.ForeignKeys[0]: // order_order_items
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderLineItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderLineItem fields.
func (oli *OrderLineItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderlineitem.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				oli.ID = value.String
			}
		case orderlineitem.FieldOrderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				oli.OrderID = value.String
			}
		case orderlineitem.FieldProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				oli.ProductID = value.String
			}
		case orderlineitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oli.CreatedAt = value.Time
			}
		case orderlineitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oli.UpdatedAt = value.Time
			}
		case orderlineitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_order_items", values[i])
			} else if value.Valid {
				oli.order_order_items = new(string)
				*oli.order_order_items = value.String
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the OrderLineItem entity.
func (oli *OrderLineItem) QueryOwner() *OrderQuery {
	return (&OrderLineItemClient{config: oli.config}).QueryOwner(oli)
}

// Update returns a builder for updating this OrderLineItem.
// Note that you need to call OrderLineItem.Unwrap() before calling this method if this OrderLineItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (oli *OrderLineItem) Update() *OrderLineItemUpdateOne {
	return (&OrderLineItemClient{config: oli.config}).UpdateOne(oli)
}

// Unwrap unwraps the OrderLineItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oli *OrderLineItem) Unwrap() *OrderLineItem {
	tx, ok := oli.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderLineItem is not a transactional entity")
	}
	oli.config.driver = tx.drv
	return oli
}

// String implements the fmt.Stringer.
func (oli *OrderLineItem) String() string {
	var builder strings.Builder
	builder.WriteString("OrderLineItem(")
	builder.WriteString(fmt.Sprintf("id=%v", oli.ID))
	builder.WriteString(", order_id=")
	builder.WriteString(oli.OrderID)
	builder.WriteString(", product_id=")
	builder.WriteString(oli.ProductID)
	builder.WriteString(", created_at=")
	builder.WriteString(oli.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(oli.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OrderLineItems is a parsable slice of OrderLineItem.
type OrderLineItems []*OrderLineItem

func (oli OrderLineItems) config(cfg config) {
	for _i := range oli {
		oli[_i].config = cfg
	}
}
