// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/pot-code/go-cqrs-demo/ent/order"
	"github.com/pot-code/go-cqrs-demo/ent/orderlineitem"
	"github.com/pot-code/go-cqrs-demo/ent/predicate"
)

// OrderLineItemUpdate is the builder for updating OrderLineItem entities.
type OrderLineItemUpdate struct {
	config
	hooks    []Hook
	mutation *OrderLineItemMutation
}

// Where appends a list predicates to the OrderLineItemUpdate builder.
func (oliu *OrderLineItemUpdate) Where(ps ...predicate.OrderLineItem) *OrderLineItemUpdate {
	oliu.mutation.Where(ps...)
	return oliu
}

// SetOrderID sets the "order_id" field.
func (oliu *OrderLineItemUpdate) SetOrderID(s string) *OrderLineItemUpdate {
	oliu.mutation.SetOrderID(s)
	return oliu
}

// SetProductID sets the "product_id" field.
func (oliu *OrderLineItemUpdate) SetProductID(s string) *OrderLineItemUpdate {
	oliu.mutation.SetProductID(s)
	return oliu
}

// SetCreatedAt sets the "created_at" field.
func (oliu *OrderLineItemUpdate) SetCreatedAt(t time.Time) *OrderLineItemUpdate {
	oliu.mutation.SetCreatedAt(t)
	return oliu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oliu *OrderLineItemUpdate) SetNillableCreatedAt(t *time.Time) *OrderLineItemUpdate {
	if t != nil {
		oliu.SetCreatedAt(*t)
	}
	return oliu
}

// SetUpdatedAt sets the "updated_at" field.
func (oliu *OrderLineItemUpdate) SetUpdatedAt(t time.Time) *OrderLineItemUpdate {
	oliu.mutation.SetUpdatedAt(t)
	return oliu
}

// SetOwnerID sets the "owner" edge to the Order entity by ID.
func (oliu *OrderLineItemUpdate) SetOwnerID(id string) *OrderLineItemUpdate {
	oliu.mutation.SetOwnerID(id)
	return oliu
}

// SetNillableOwnerID sets the "owner" edge to the Order entity by ID if the given value is not nil.
func (oliu *OrderLineItemUpdate) SetNillableOwnerID(id *string) *OrderLineItemUpdate {
	if id != nil {
		oliu = oliu.SetOwnerID(*id)
	}
	return oliu
}

// SetOwner sets the "owner" edge to the Order entity.
func (oliu *OrderLineItemUpdate) SetOwner(o *Order) *OrderLineItemUpdate {
	return oliu.SetOwnerID(o.ID)
}

// Mutation returns the OrderLineItemMutation object of the builder.
func (oliu *OrderLineItemUpdate) Mutation() *OrderLineItemMutation {
	return oliu.mutation
}

// ClearOwner clears the "owner" edge to the Order entity.
func (oliu *OrderLineItemUpdate) ClearOwner() *OrderLineItemUpdate {
	oliu.mutation.ClearOwner()
	return oliu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oliu *OrderLineItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	oliu.defaults()
	if len(oliu.hooks) == 0 {
		affected, err = oliu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderLineItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oliu.mutation = mutation
			affected, err = oliu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oliu.hooks) - 1; i >= 0; i-- {
			if oliu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oliu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oliu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oliu *OrderLineItemUpdate) SaveX(ctx context.Context) int {
	affected, err := oliu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oliu *OrderLineItemUpdate) Exec(ctx context.Context) error {
	_, err := oliu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oliu *OrderLineItemUpdate) ExecX(ctx context.Context) {
	if err := oliu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oliu *OrderLineItemUpdate) defaults() {
	if _, ok := oliu.mutation.UpdatedAt(); !ok {
		v := orderlineitem.UpdateDefaultUpdatedAt()
		oliu.mutation.SetUpdatedAt(v)
	}
}

func (oliu *OrderLineItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderlineitem.Table,
			Columns: orderlineitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orderlineitem.FieldID,
			},
		},
	}
	if ps := oliu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oliu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderlineitem.FieldOrderID,
		})
	}
	if value, ok := oliu.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderlineitem.FieldProductID,
		})
	}
	if value, ok := oliu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderlineitem.FieldCreatedAt,
		})
	}
	if value, ok := oliu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderlineitem.FieldUpdatedAt,
		})
	}
	if oliu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderlineitem.OwnerTable,
			Columns: []string{orderlineitem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oliu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderlineitem.OwnerTable,
			Columns: []string{orderlineitem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oliu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderlineitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderLineItemUpdateOne is the builder for updating a single OrderLineItem entity.
type OrderLineItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderLineItemMutation
}

// SetOrderID sets the "order_id" field.
func (oliuo *OrderLineItemUpdateOne) SetOrderID(s string) *OrderLineItemUpdateOne {
	oliuo.mutation.SetOrderID(s)
	return oliuo
}

// SetProductID sets the "product_id" field.
func (oliuo *OrderLineItemUpdateOne) SetProductID(s string) *OrderLineItemUpdateOne {
	oliuo.mutation.SetProductID(s)
	return oliuo
}

// SetCreatedAt sets the "created_at" field.
func (oliuo *OrderLineItemUpdateOne) SetCreatedAt(t time.Time) *OrderLineItemUpdateOne {
	oliuo.mutation.SetCreatedAt(t)
	return oliuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oliuo *OrderLineItemUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderLineItemUpdateOne {
	if t != nil {
		oliuo.SetCreatedAt(*t)
	}
	return oliuo
}

// SetUpdatedAt sets the "updated_at" field.
func (oliuo *OrderLineItemUpdateOne) SetUpdatedAt(t time.Time) *OrderLineItemUpdateOne {
	oliuo.mutation.SetUpdatedAt(t)
	return oliuo
}

// SetOwnerID sets the "owner" edge to the Order entity by ID.
func (oliuo *OrderLineItemUpdateOne) SetOwnerID(id string) *OrderLineItemUpdateOne {
	oliuo.mutation.SetOwnerID(id)
	return oliuo
}

// SetNillableOwnerID sets the "owner" edge to the Order entity by ID if the given value is not nil.
func (oliuo *OrderLineItemUpdateOne) SetNillableOwnerID(id *string) *OrderLineItemUpdateOne {
	if id != nil {
		oliuo = oliuo.SetOwnerID(*id)
	}
	return oliuo
}

// SetOwner sets the "owner" edge to the Order entity.
func (oliuo *OrderLineItemUpdateOne) SetOwner(o *Order) *OrderLineItemUpdateOne {
	return oliuo.SetOwnerID(o.ID)
}

// Mutation returns the OrderLineItemMutation object of the builder.
func (oliuo *OrderLineItemUpdateOne) Mutation() *OrderLineItemMutation {
	return oliuo.mutation
}

// ClearOwner clears the "owner" edge to the Order entity.
func (oliuo *OrderLineItemUpdateOne) ClearOwner() *OrderLineItemUpdateOne {
	oliuo.mutation.ClearOwner()
	return oliuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oliuo *OrderLineItemUpdateOne) Select(field string, fields ...string) *OrderLineItemUpdateOne {
	oliuo.fields = append([]string{field}, fields...)
	return oliuo
}

// Save executes the query and returns the updated OrderLineItem entity.
func (oliuo *OrderLineItemUpdateOne) Save(ctx context.Context) (*OrderLineItem, error) {
	var (
		err  error
		node *OrderLineItem
	)
	oliuo.defaults()
	if len(oliuo.hooks) == 0 {
		node, err = oliuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderLineItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oliuo.mutation = mutation
			node, err = oliuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oliuo.hooks) - 1; i >= 0; i-- {
			if oliuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oliuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oliuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oliuo *OrderLineItemUpdateOne) SaveX(ctx context.Context) *OrderLineItem {
	node, err := oliuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oliuo *OrderLineItemUpdateOne) Exec(ctx context.Context) error {
	_, err := oliuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oliuo *OrderLineItemUpdateOne) ExecX(ctx context.Context) {
	if err := oliuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oliuo *OrderLineItemUpdateOne) defaults() {
	if _, ok := oliuo.mutation.UpdatedAt(); !ok {
		v := orderlineitem.UpdateDefaultUpdatedAt()
		oliuo.mutation.SetUpdatedAt(v)
	}
}

func (oliuo *OrderLineItemUpdateOne) sqlSave(ctx context.Context) (_node *OrderLineItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderlineitem.Table,
			Columns: orderlineitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orderlineitem.FieldID,
			},
		},
	}
	id, ok := oliuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OrderLineItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := oliuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderlineitem.FieldID)
		for _, f := range fields {
			if !orderlineitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderlineitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oliuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oliuo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderlineitem.FieldOrderID,
		})
	}
	if value, ok := oliuo.mutation.ProductID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderlineitem.FieldProductID,
		})
	}
	if value, ok := oliuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderlineitem.FieldCreatedAt,
		})
	}
	if value, ok := oliuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderlineitem.FieldUpdatedAt,
		})
	}
	if oliuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderlineitem.OwnerTable,
			Columns: []string{orderlineitem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oliuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderlineitem.OwnerTable,
			Columns: []string{orderlineitem.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderLineItem{config: oliuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oliuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderlineitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
